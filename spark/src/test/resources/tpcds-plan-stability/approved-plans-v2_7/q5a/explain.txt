== Physical Plan ==
* CometColumnarToRow (92)
+- CometTakeOrderedAndProject (91)
   +- CometHashAggregate (90)
      +- CometColumnarExchange (89)
         +- * HashAggregate (88)
            +- Union (87)
               :- * HashAggregate (72)
               :  +- * CometColumnarToRow (71)
               :     +- CometColumnarExchange (70)
               :        +- * HashAggregate (69)
               :           +- Union (68)
               :              :- * HashAggregate (23)
               :              :  +- * CometColumnarToRow (22)
               :              :     +- CometExchange (21)
               :              :        +- CometHashAggregate (20)
               :              :           +- CometProject (19)
               :              :              +- CometBroadcastHashJoin (18)
               :              :                 :- CometProject (13)
               :              :                 :  +- CometBroadcastHashJoin (12)
               :              :                 :     :- CometUnion (7)
               :              :                 :     :  :- CometProject (3)
               :              :                 :     :  :  +- CometFilter (2)
               :              :                 :     :  :     +- CometScan [native_iceberg_compat] parquet spark_catalog.default.store_sales (1)
               :              :                 :     :  +- CometProject (6)
               :              :                 :     :     +- CometFilter (5)
               :              :                 :     :        +- CometScan [native_iceberg_compat] parquet spark_catalog.default.store_returns (4)
               :              :                 :     +- CometBroadcastExchange (11)
               :              :                 :        +- CometProject (10)
               :              :                 :           +- CometFilter (9)
               :              :                 :              +- CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim (8)
               :              :                 +- CometBroadcastExchange (17)
               :              :                    +- CometProject (16)
               :              :                       +- CometFilter (15)
               :              :                          +- CometScan [native_iceberg_compat] parquet spark_catalog.default.store (14)
               :              :- * HashAggregate (43)
               :              :  +- * CometColumnarToRow (42)
               :              :     +- CometExchange (41)
               :              :        +- CometHashAggregate (40)
               :              :           +- CometProject (39)
               :              :              +- CometBroadcastHashJoin (38)
               :              :                 :- CometProject (33)
               :              :                 :  +- CometBroadcastHashJoin (32)
               :              :                 :     :- CometUnion (30)
               :              :                 :     :  :- CometProject (26)
               :              :                 :     :  :  +- CometFilter (25)
               :              :                 :     :  :     +- CometScan [native_iceberg_compat] parquet spark_catalog.default.catalog_sales (24)
               :              :                 :     :  +- CometProject (29)
               :              :                 :     :     +- CometFilter (28)
               :              :                 :     :        +- CometScan [native_iceberg_compat] parquet spark_catalog.default.catalog_returns (27)
               :              :                 :     +- ReusedExchange (31)
               :              :                 +- CometBroadcastExchange (37)
               :              :                    +- CometProject (36)
               :              :                       +- CometFilter (35)
               :              :                          +- CometScan [native_iceberg_compat] parquet spark_catalog.default.catalog_page (34)
               :              +- * HashAggregate (67)
               :                 +- * CometColumnarToRow (66)
               :                    +- CometExchange (65)
               :                       +- CometHashAggregate (64)
               :                          +- CometProject (63)
               :                             +- CometBroadcastHashJoin (62)
               :                                :- CometProject (57)
               :                                :  +- CometBroadcastHashJoin (56)
               :                                :     :- CometUnion (54)
               :                                :     :  :- CometProject (46)
               :                                :     :  :  +- CometFilter (45)
               :                                :     :  :     +- CometScan [native_iceberg_compat] parquet spark_catalog.default.web_sales (44)
               :                                :     :  +- CometProject (53)
               :                                :     :     +- CometBroadcastHashJoin (52)
               :                                :     :        :- CometBroadcastExchange (48)
               :                                :     :        :  +- CometScan [native_iceberg_compat] parquet spark_catalog.default.web_returns (47)
               :                                :     :        +- CometProject (51)
               :                                :     :           +- CometFilter (50)
               :                                :     :              +- CometScan [native_iceberg_compat] parquet spark_catalog.default.web_sales (49)
               :                                :     +- ReusedExchange (55)
               :                                +- CometBroadcastExchange (61)
               :                                   +- CometProject (60)
               :                                      +- CometFilter (59)
               :                                         +- CometScan [native_iceberg_compat] parquet spark_catalog.default.web_site (58)
               :- * HashAggregate (79)
               :  +- * CometColumnarToRow (78)
               :     +- CometColumnarExchange (77)
               :        +- * HashAggregate (76)
               :           +- * HashAggregate (75)
               :              +- * CometColumnarToRow (74)
               :                 +- ReusedExchange (73)
               +- * HashAggregate (86)
                  +- * CometColumnarToRow (85)
                     +- CometColumnarExchange (84)
                        +- * HashAggregate (83)
                           +- * HashAggregate (82)
                              +- * CometColumnarToRow (81)
                                 +- ReusedExchange (80)


(1) CometScan [native_iceberg_compat] parquet spark_catalog.default.store_sales
Output [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_store_sk#1)

(3) CometProject
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Arguments: [store_sk#5, date_sk#6, sales_price#7, profit#8, return_amt#9, net_loss#10], [ss_store_sk#1 AS store_sk#5, ss_sold_date_sk#4 AS date_sk#6, ss_ext_sales_price#2 AS sales_price#7, ss_net_profit#3 AS profit#8, 0.00 AS return_amt#9, 0.00 AS net_loss#10]

(4) CometScan [native_iceberg_compat] parquet spark_catalog.default.store_returns
Output [4]: [sr_store_sk#11, sr_return_amt#12, sr_net_loss#13, sr_returned_date_sk#14]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#14)]
PushedFilters: [IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_store_sk:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(5) CometFilter
Input [4]: [sr_store_sk#11, sr_return_amt#12, sr_net_loss#13, sr_returned_date_sk#14]
Condition : isnotnull(sr_store_sk#11)

(6) CometProject
Input [4]: [sr_store_sk#11, sr_return_amt#12, sr_net_loss#13, sr_returned_date_sk#14]
Arguments: [store_sk#15, date_sk#16, sales_price#17, profit#18, return_amt#19, net_loss#20], [sr_store_sk#11 AS store_sk#15, sr_returned_date_sk#14 AS date_sk#16, 0.00 AS sales_price#17, 0.00 AS profit#18, sr_return_amt#12 AS return_amt#19, sr_net_loss#13 AS net_loss#20]

(7) CometUnion
Child 0 Input [6]: [store_sk#5, date_sk#6, sales_price#7, profit#8, return_amt#9, net_loss#10]
Child 1 Input [6]: [store_sk#15, date_sk#16, sales_price#17, profit#18, return_amt#19, net_loss#20]

(8) CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#21, d_date#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-08-18), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(9) CometFilter
Input [2]: [d_date_sk#21, d_date#22]
Condition : (((isnotnull(d_date#22) AND (d_date#22 >= 1998-08-04)) AND (d_date#22 <= 1998-08-18)) AND isnotnull(d_date_sk#21))

(10) CometProject
Input [2]: [d_date_sk#21, d_date#22]
Arguments: [d_date_sk#21], [d_date_sk#21]

(11) CometBroadcastExchange
Input [1]: [d_date_sk#21]
Arguments: [d_date_sk#21]

(12) CometBroadcastHashJoin
Left output [6]: [store_sk#5, date_sk#6, sales_price#7, profit#8, return_amt#9, net_loss#10]
Right output [1]: [d_date_sk#21]
Arguments: [date_sk#6], [d_date_sk#21], Inner, BuildRight

(13) CometProject
Input [7]: [store_sk#5, date_sk#6, sales_price#7, profit#8, return_amt#9, net_loss#10, d_date_sk#21]
Arguments: [store_sk#5, sales_price#7, profit#8, return_amt#9, net_loss#10], [store_sk#5, sales_price#7, profit#8, return_amt#9, net_loss#10]

(14) CometScan [native_iceberg_compat] parquet spark_catalog.default.store
Output [2]: [s_store_sk#23, s_store_id#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(15) CometFilter
Input [2]: [s_store_sk#23, s_store_id#24]
Condition : isnotnull(s_store_sk#23)

(16) CometProject
Input [2]: [s_store_sk#23, s_store_id#24]
Arguments: [s_store_sk#23, s_store_id#25], [s_store_sk#23, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_store_id#24, 16, true, false, true) AS s_store_id#25]

(17) CometBroadcastExchange
Input [2]: [s_store_sk#23, s_store_id#25]
Arguments: [s_store_sk#23, s_store_id#25]

(18) CometBroadcastHashJoin
Left output [5]: [store_sk#5, sales_price#7, profit#8, return_amt#9, net_loss#10]
Right output [2]: [s_store_sk#23, s_store_id#25]
Arguments: [store_sk#5], [s_store_sk#23], Inner, BuildRight

(19) CometProject
Input [7]: [store_sk#5, sales_price#7, profit#8, return_amt#9, net_loss#10, s_store_sk#23, s_store_id#25]
Arguments: [sales_price#7, profit#8, return_amt#9, net_loss#10, s_store_id#25], [sales_price#7, profit#8, return_amt#9, net_loss#10, s_store_id#25]

(20) CometHashAggregate
Input [5]: [sales_price#7, profit#8, return_amt#9, net_loss#10, s_store_id#25]
Keys [1]: [s_store_id#25]
Functions [4]: [partial_sum(UnscaledValue(sales_price#7)), partial_sum(UnscaledValue(return_amt#9)), partial_sum(UnscaledValue(profit#8)), partial_sum(UnscaledValue(net_loss#10))]

(21) CometExchange
Input [5]: [s_store_id#25, sum#26, sum#27, sum#28, sum#29]
Arguments: hashpartitioning(s_store_id#25, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(22) CometColumnarToRow [codegen id : 1]
Input [5]: [s_store_id#25, sum#26, sum#27, sum#28, sum#29]

(23) HashAggregate [codegen id : 1]
Input [5]: [s_store_id#25, sum#26, sum#27, sum#28, sum#29]
Keys [1]: [s_store_id#25]
Functions [4]: [sum(UnscaledValue(sales_price#7)), sum(UnscaledValue(return_amt#9)), sum(UnscaledValue(profit#8)), sum(UnscaledValue(net_loss#10))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#7))#30, sum(UnscaledValue(return_amt#9))#31, sum(UnscaledValue(profit#8))#32, sum(UnscaledValue(net_loss#10))#33]
Results [5]: [store channel AS channel#34, concat(store, s_store_id#25) AS id#35, MakeDecimal(sum(UnscaledValue(sales_price#7))#30,17,2) AS sales#36, MakeDecimal(sum(UnscaledValue(return_amt#9))#31,17,2) AS returns#37, (MakeDecimal(sum(UnscaledValue(profit#8))#32,17,2) - MakeDecimal(sum(UnscaledValue(net_loss#10))#33,17,2)) AS profit#38]

(24) CometScan [native_iceberg_compat] parquet spark_catalog.default.catalog_sales
Output [4]: [cs_catalog_page_sk#39, cs_ext_sales_price#40, cs_net_profit#41, cs_sold_date_sk#42]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#42)]
PushedFilters: [IsNotNull(cs_catalog_page_sk)]
ReadSchema: struct<cs_catalog_page_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(25) CometFilter
Input [4]: [cs_catalog_page_sk#39, cs_ext_sales_price#40, cs_net_profit#41, cs_sold_date_sk#42]
Condition : isnotnull(cs_catalog_page_sk#39)

(26) CometProject
Input [4]: [cs_catalog_page_sk#39, cs_ext_sales_price#40, cs_net_profit#41, cs_sold_date_sk#42]
Arguments: [page_sk#43, date_sk#44, sales_price#45, profit#46, return_amt#47, net_loss#48], [cs_catalog_page_sk#39 AS page_sk#43, cs_sold_date_sk#42 AS date_sk#44, cs_ext_sales_price#40 AS sales_price#45, cs_net_profit#41 AS profit#46, 0.00 AS return_amt#47, 0.00 AS net_loss#48]

(27) CometScan [native_iceberg_compat] parquet spark_catalog.default.catalog_returns
Output [4]: [cr_catalog_page_sk#49, cr_return_amount#50, cr_net_loss#51, cr_returned_date_sk#52]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#52)]
PushedFilters: [IsNotNull(cr_catalog_page_sk)]
ReadSchema: struct<cr_catalog_page_sk:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(28) CometFilter
Input [4]: [cr_catalog_page_sk#49, cr_return_amount#50, cr_net_loss#51, cr_returned_date_sk#52]
Condition : isnotnull(cr_catalog_page_sk#49)

(29) CometProject
Input [4]: [cr_catalog_page_sk#49, cr_return_amount#50, cr_net_loss#51, cr_returned_date_sk#52]
Arguments: [page_sk#53, date_sk#54, sales_price#55, profit#56, return_amt#57, net_loss#58], [cr_catalog_page_sk#49 AS page_sk#53, cr_returned_date_sk#52 AS date_sk#54, 0.00 AS sales_price#55, 0.00 AS profit#56, cr_return_amount#50 AS return_amt#57, cr_net_loss#51 AS net_loss#58]

(30) CometUnion
Child 0 Input [6]: [page_sk#43, date_sk#44, sales_price#45, profit#46, return_amt#47, net_loss#48]
Child 1 Input [6]: [page_sk#53, date_sk#54, sales_price#55, profit#56, return_amt#57, net_loss#58]

(31) ReusedExchange [Reuses operator id: 11]
Output [1]: [d_date_sk#59]

(32) CometBroadcastHashJoin
Left output [6]: [page_sk#43, date_sk#44, sales_price#45, profit#46, return_amt#47, net_loss#48]
Right output [1]: [d_date_sk#59]
Arguments: [date_sk#44], [d_date_sk#59], Inner, BuildRight

(33) CometProject
Input [7]: [page_sk#43, date_sk#44, sales_price#45, profit#46, return_amt#47, net_loss#48, d_date_sk#59]
Arguments: [page_sk#43, sales_price#45, profit#46, return_amt#47, net_loss#48], [page_sk#43, sales_price#45, profit#46, return_amt#47, net_loss#48]

(34) CometScan [native_iceberg_compat] parquet spark_catalog.default.catalog_page
Output [2]: [cp_catalog_page_sk#60, cp_catalog_page_id#61]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_page]
PushedFilters: [IsNotNull(cp_catalog_page_sk)]
ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>

(35) CometFilter
Input [2]: [cp_catalog_page_sk#60, cp_catalog_page_id#61]
Condition : isnotnull(cp_catalog_page_sk#60)

(36) CometProject
Input [2]: [cp_catalog_page_sk#60, cp_catalog_page_id#61]
Arguments: [cp_catalog_page_sk#60, cp_catalog_page_id#62], [cp_catalog_page_sk#60, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cp_catalog_page_id#61, 16, true, false, true) AS cp_catalog_page_id#62]

(37) CometBroadcastExchange
Input [2]: [cp_catalog_page_sk#60, cp_catalog_page_id#62]
Arguments: [cp_catalog_page_sk#60, cp_catalog_page_id#62]

(38) CometBroadcastHashJoin
Left output [5]: [page_sk#43, sales_price#45, profit#46, return_amt#47, net_loss#48]
Right output [2]: [cp_catalog_page_sk#60, cp_catalog_page_id#62]
Arguments: [page_sk#43], [cp_catalog_page_sk#60], Inner, BuildRight

(39) CometProject
Input [7]: [page_sk#43, sales_price#45, profit#46, return_amt#47, net_loss#48, cp_catalog_page_sk#60, cp_catalog_page_id#62]
Arguments: [sales_price#45, profit#46, return_amt#47, net_loss#48, cp_catalog_page_id#62], [sales_price#45, profit#46, return_amt#47, net_loss#48, cp_catalog_page_id#62]

(40) CometHashAggregate
Input [5]: [sales_price#45, profit#46, return_amt#47, net_loss#48, cp_catalog_page_id#62]
Keys [1]: [cp_catalog_page_id#62]
Functions [4]: [partial_sum(UnscaledValue(sales_price#45)), partial_sum(UnscaledValue(return_amt#47)), partial_sum(UnscaledValue(profit#46)), partial_sum(UnscaledValue(net_loss#48))]

(41) CometExchange
Input [5]: [cp_catalog_page_id#62, sum#63, sum#64, sum#65, sum#66]
Arguments: hashpartitioning(cp_catalog_page_id#62, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(42) CometColumnarToRow [codegen id : 2]
Input [5]: [cp_catalog_page_id#62, sum#63, sum#64, sum#65, sum#66]

(43) HashAggregate [codegen id : 2]
Input [5]: [cp_catalog_page_id#62, sum#63, sum#64, sum#65, sum#66]
Keys [1]: [cp_catalog_page_id#62]
Functions [4]: [sum(UnscaledValue(sales_price#45)), sum(UnscaledValue(return_amt#47)), sum(UnscaledValue(profit#46)), sum(UnscaledValue(net_loss#48))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#45))#67, sum(UnscaledValue(return_amt#47))#68, sum(UnscaledValue(profit#46))#69, sum(UnscaledValue(net_loss#48))#70]
Results [5]: [catalog channel AS channel#71, concat(catalog_page, cp_catalog_page_id#62) AS id#72, MakeDecimal(sum(UnscaledValue(sales_price#45))#67,17,2) AS sales#73, MakeDecimal(sum(UnscaledValue(return_amt#47))#68,17,2) AS returns#74, (MakeDecimal(sum(UnscaledValue(profit#46))#69,17,2) - MakeDecimal(sum(UnscaledValue(net_loss#48))#70,17,2)) AS profit#75]

(44) CometScan [native_iceberg_compat] parquet spark_catalog.default.web_sales
Output [4]: [ws_web_site_sk#76, ws_ext_sales_price#77, ws_net_profit#78, ws_sold_date_sk#79]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#79)]
PushedFilters: [IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_web_site_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(45) CometFilter
Input [4]: [ws_web_site_sk#76, ws_ext_sales_price#77, ws_net_profit#78, ws_sold_date_sk#79]
Condition : isnotnull(ws_web_site_sk#76)

(46) CometProject
Input [4]: [ws_web_site_sk#76, ws_ext_sales_price#77, ws_net_profit#78, ws_sold_date_sk#79]
Arguments: [wsr_web_site_sk#80, date_sk#81, sales_price#82, profit#83, return_amt#84, net_loss#85], [ws_web_site_sk#76 AS wsr_web_site_sk#80, ws_sold_date_sk#79 AS date_sk#81, ws_ext_sales_price#77 AS sales_price#82, ws_net_profit#78 AS profit#83, 0.00 AS return_amt#84, 0.00 AS net_loss#85]

(47) CometScan [native_iceberg_compat] parquet spark_catalog.default.web_returns
Output [5]: [wr_item_sk#86, wr_order_number#87, wr_return_amt#88, wr_net_loss#89, wr_returned_date_sk#90]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#90)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(48) CometBroadcastExchange
Input [5]: [wr_item_sk#86, wr_order_number#87, wr_return_amt#88, wr_net_loss#89, wr_returned_date_sk#90]
Arguments: [wr_item_sk#86, wr_order_number#87, wr_return_amt#88, wr_net_loss#89, wr_returned_date_sk#90]

(49) CometScan [native_iceberg_compat] parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#91, ws_web_site_sk#92, ws_order_number#93, ws_sold_date_sk#94]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_order_number:int>

(50) CometFilter
Input [4]: [ws_item_sk#91, ws_web_site_sk#92, ws_order_number#93, ws_sold_date_sk#94]
Condition : ((isnotnull(ws_item_sk#91) AND isnotnull(ws_order_number#93)) AND isnotnull(ws_web_site_sk#92))

(51) CometProject
Input [4]: [ws_item_sk#91, ws_web_site_sk#92, ws_order_number#93, ws_sold_date_sk#94]
Arguments: [ws_item_sk#91, ws_web_site_sk#92, ws_order_number#93], [ws_item_sk#91, ws_web_site_sk#92, ws_order_number#93]

(52) CometBroadcastHashJoin
Left output [5]: [wr_item_sk#86, wr_order_number#87, wr_return_amt#88, wr_net_loss#89, wr_returned_date_sk#90]
Right output [3]: [ws_item_sk#91, ws_web_site_sk#92, ws_order_number#93]
Arguments: [wr_item_sk#86, wr_order_number#87], [ws_item_sk#91, ws_order_number#93], Inner, BuildLeft

(53) CometProject
Input [8]: [wr_item_sk#86, wr_order_number#87, wr_return_amt#88, wr_net_loss#89, wr_returned_date_sk#90, ws_item_sk#91, ws_web_site_sk#92, ws_order_number#93]
Arguments: [wsr_web_site_sk#95, date_sk#96, sales_price#97, profit#98, return_amt#99, net_loss#100], [ws_web_site_sk#92 AS wsr_web_site_sk#95, wr_returned_date_sk#90 AS date_sk#96, 0.00 AS sales_price#97, 0.00 AS profit#98, wr_return_amt#88 AS return_amt#99, wr_net_loss#89 AS net_loss#100]

(54) CometUnion
Child 0 Input [6]: [wsr_web_site_sk#80, date_sk#81, sales_price#82, profit#83, return_amt#84, net_loss#85]
Child 1 Input [6]: [wsr_web_site_sk#95, date_sk#96, sales_price#97, profit#98, return_amt#99, net_loss#100]

(55) ReusedExchange [Reuses operator id: 11]
Output [1]: [d_date_sk#101]

(56) CometBroadcastHashJoin
Left output [6]: [wsr_web_site_sk#80, date_sk#81, sales_price#82, profit#83, return_amt#84, net_loss#85]
Right output [1]: [d_date_sk#101]
Arguments: [date_sk#81], [d_date_sk#101], Inner, BuildRight

(57) CometProject
Input [7]: [wsr_web_site_sk#80, date_sk#81, sales_price#82, profit#83, return_amt#84, net_loss#85, d_date_sk#101]
Arguments: [wsr_web_site_sk#80, sales_price#82, profit#83, return_amt#84, net_loss#85], [wsr_web_site_sk#80, sales_price#82, profit#83, return_amt#84, net_loss#85]

(58) CometScan [native_iceberg_compat] parquet spark_catalog.default.web_site
Output [2]: [web_site_sk#102, web_site_id#103]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_site_id:string>

(59) CometFilter
Input [2]: [web_site_sk#102, web_site_id#103]
Condition : isnotnull(web_site_sk#102)

(60) CometProject
Input [2]: [web_site_sk#102, web_site_id#103]
Arguments: [web_site_sk#102, web_site_id#104], [web_site_sk#102, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, web_site_id#103, 16, true, false, true) AS web_site_id#104]

(61) CometBroadcastExchange
Input [2]: [web_site_sk#102, web_site_id#104]
Arguments: [web_site_sk#102, web_site_id#104]

(62) CometBroadcastHashJoin
Left output [5]: [wsr_web_site_sk#80, sales_price#82, profit#83, return_amt#84, net_loss#85]
Right output [2]: [web_site_sk#102, web_site_id#104]
Arguments: [wsr_web_site_sk#80], [web_site_sk#102], Inner, BuildRight

(63) CometProject
Input [7]: [wsr_web_site_sk#80, sales_price#82, profit#83, return_amt#84, net_loss#85, web_site_sk#102, web_site_id#104]
Arguments: [sales_price#82, profit#83, return_amt#84, net_loss#85, web_site_id#104], [sales_price#82, profit#83, return_amt#84, net_loss#85, web_site_id#104]

(64) CometHashAggregate
Input [5]: [sales_price#82, profit#83, return_amt#84, net_loss#85, web_site_id#104]
Keys [1]: [web_site_id#104]
Functions [4]: [partial_sum(UnscaledValue(sales_price#82)), partial_sum(UnscaledValue(return_amt#84)), partial_sum(UnscaledValue(profit#83)), partial_sum(UnscaledValue(net_loss#85))]

(65) CometExchange
Input [5]: [web_site_id#104, sum#105, sum#106, sum#107, sum#108]
Arguments: hashpartitioning(web_site_id#104, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(66) CometColumnarToRow [codegen id : 3]
Input [5]: [web_site_id#104, sum#105, sum#106, sum#107, sum#108]

(67) HashAggregate [codegen id : 3]
Input [5]: [web_site_id#104, sum#105, sum#106, sum#107, sum#108]
Keys [1]: [web_site_id#104]
Functions [4]: [sum(UnscaledValue(sales_price#82)), sum(UnscaledValue(return_amt#84)), sum(UnscaledValue(profit#83)), sum(UnscaledValue(net_loss#85))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#82))#109, sum(UnscaledValue(return_amt#84))#110, sum(UnscaledValue(profit#83))#111, sum(UnscaledValue(net_loss#85))#112]
Results [5]: [web channel AS channel#113, concat(web_site, web_site_id#104) AS id#114, MakeDecimal(sum(UnscaledValue(sales_price#82))#109,17,2) AS sales#115, MakeDecimal(sum(UnscaledValue(return_amt#84))#110,17,2) AS returns#116, (MakeDecimal(sum(UnscaledValue(profit#83))#111,17,2) - MakeDecimal(sum(UnscaledValue(net_loss#85))#112,17,2)) AS profit#117]

(68) Union

(69) HashAggregate [codegen id : 4]
Input [5]: [channel#34, id#35, sales#36, returns#37, profit#38]
Keys [2]: [channel#34, id#35]
Functions [3]: [partial_sum(sales#36), partial_sum(returns#37), partial_sum(profit#38)]
Aggregate Attributes [6]: [sum#118, isEmpty#119, sum#120, isEmpty#121, sum#122, isEmpty#123]
Results [8]: [channel#34, id#35, sum#124, isEmpty#125, sum#126, isEmpty#127, sum#128, isEmpty#129]

(70) CometColumnarExchange
Input [8]: [channel#34, id#35, sum#124, isEmpty#125, sum#126, isEmpty#127, sum#128, isEmpty#129]
Arguments: hashpartitioning(channel#34, id#35, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(71) CometColumnarToRow [codegen id : 5]
Input [8]: [channel#34, id#35, sum#124, isEmpty#125, sum#126, isEmpty#127, sum#128, isEmpty#129]

(72) HashAggregate [codegen id : 5]
Input [8]: [channel#34, id#35, sum#124, isEmpty#125, sum#126, isEmpty#127, sum#128, isEmpty#129]
Keys [2]: [channel#34, id#35]
Functions [3]: [sum(sales#36), sum(returns#37), sum(profit#38)]
Aggregate Attributes [3]: [sum(sales#36)#130, sum(returns#37)#131, sum(profit#38)#132]
Results [5]: [channel#34, id#35, cast(sum(sales#36)#130 as decimal(37,2)) AS sales#133, cast(sum(returns#37)#131 as decimal(37,2)) AS returns#134, cast(sum(profit#38)#132 as decimal(38,2)) AS profit#135]

(73) ReusedExchange [Reuses operator id: 70]
Output [8]: [channel#34, id#35, sum#124, isEmpty#125, sum#126, isEmpty#127, sum#128, isEmpty#129]

(74) CometColumnarToRow [codegen id : 10]
Input [8]: [channel#34, id#35, sum#124, isEmpty#125, sum#126, isEmpty#127, sum#128, isEmpty#129]

(75) HashAggregate [codegen id : 10]
Input [8]: [channel#34, id#35, sum#124, isEmpty#125, sum#126, isEmpty#127, sum#128, isEmpty#129]
Keys [2]: [channel#34, id#35]
Functions [3]: [sum(sales#36), sum(returns#37), sum(profit#38)]
Aggregate Attributes [3]: [sum(sales#36)#130, sum(returns#37)#131, sum(profit#38)#132]
Results [4]: [channel#34, sum(sales#36)#130 AS sales#136, sum(returns#37)#131 AS returns#137, sum(profit#38)#132 AS profit#138]

(76) HashAggregate [codegen id : 10]
Input [4]: [channel#34, sales#136, returns#137, profit#138]
Keys [1]: [channel#34]
Functions [3]: [partial_sum(sales#136), partial_sum(returns#137), partial_sum(profit#138)]
Aggregate Attributes [6]: [sum#139, isEmpty#140, sum#141, isEmpty#142, sum#143, isEmpty#144]
Results [7]: [channel#34, sum#145, isEmpty#146, sum#147, isEmpty#148, sum#149, isEmpty#150]

(77) CometColumnarExchange
Input [7]: [channel#34, sum#145, isEmpty#146, sum#147, isEmpty#148, sum#149, isEmpty#150]
Arguments: hashpartitioning(channel#34, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(78) CometColumnarToRow [codegen id : 11]
Input [7]: [channel#34, sum#145, isEmpty#146, sum#147, isEmpty#148, sum#149, isEmpty#150]

(79) HashAggregate [codegen id : 11]
Input [7]: [channel#34, sum#145, isEmpty#146, sum#147, isEmpty#148, sum#149, isEmpty#150]
Keys [1]: [channel#34]
Functions [3]: [sum(sales#136), sum(returns#137), sum(profit#138)]
Aggregate Attributes [3]: [sum(sales#136)#151, sum(returns#137)#152, sum(profit#138)#153]
Results [5]: [channel#34, null AS id#154, sum(sales#136)#151 AS sum(sales)#155, sum(returns#137)#152 AS sum(returns)#156, sum(profit#138)#153 AS sum(profit)#157]

(80) ReusedExchange [Reuses operator id: 70]
Output [8]: [channel#34, id#35, sum#124, isEmpty#125, sum#126, isEmpty#127, sum#128, isEmpty#129]

(81) CometColumnarToRow [codegen id : 16]
Input [8]: [channel#34, id#35, sum#124, isEmpty#125, sum#126, isEmpty#127, sum#128, isEmpty#129]

(82) HashAggregate [codegen id : 16]
Input [8]: [channel#34, id#35, sum#124, isEmpty#125, sum#126, isEmpty#127, sum#128, isEmpty#129]
Keys [2]: [channel#34, id#35]
Functions [3]: [sum(sales#36), sum(returns#37), sum(profit#38)]
Aggregate Attributes [3]: [sum(sales#36)#130, sum(returns#37)#131, sum(profit#38)#132]
Results [3]: [sum(sales#36)#130 AS sales#136, sum(returns#37)#131 AS returns#137, sum(profit#38)#132 AS profit#138]

(83) HashAggregate [codegen id : 16]
Input [3]: [sales#136, returns#137, profit#138]
Keys: []
Functions [3]: [partial_sum(sales#136), partial_sum(returns#137), partial_sum(profit#138)]
Aggregate Attributes [6]: [sum#158, isEmpty#159, sum#160, isEmpty#161, sum#162, isEmpty#163]
Results [6]: [sum#164, isEmpty#165, sum#166, isEmpty#167, sum#168, isEmpty#169]

(84) CometColumnarExchange
Input [6]: [sum#164, isEmpty#165, sum#166, isEmpty#167, sum#168, isEmpty#169]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(85) CometColumnarToRow [codegen id : 17]
Input [6]: [sum#164, isEmpty#165, sum#166, isEmpty#167, sum#168, isEmpty#169]

(86) HashAggregate [codegen id : 17]
Input [6]: [sum#164, isEmpty#165, sum#166, isEmpty#167, sum#168, isEmpty#169]
Keys: []
Functions [3]: [sum(sales#136), sum(returns#137), sum(profit#138)]
Aggregate Attributes [3]: [sum(sales#136)#170, sum(returns#137)#171, sum(profit#138)#172]
Results [5]: [null AS channel#173, null AS id#174, sum(sales#136)#170 AS sum(sales)#175, sum(returns#137)#171 AS sum(returns)#176, sum(profit#138)#172 AS sum(profit)#177]

(87) Union

(88) HashAggregate [codegen id : 18]
Input [5]: [channel#34, id#35, sales#133, returns#134, profit#135]
Keys [5]: [channel#34, id#35, sales#133, returns#134, profit#135]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#34, id#35, sales#133, returns#134, profit#135]

(89) CometColumnarExchange
Input [5]: [channel#34, id#35, sales#133, returns#134, profit#135]
Arguments: hashpartitioning(channel#34, id#35, sales#133, returns#134, profit#135, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=7]

(90) CometHashAggregate
Input [5]: [channel#34, id#35, sales#133, returns#134, profit#135]
Keys [5]: [channel#34, id#35, sales#133, returns#134, profit#135]
Functions: []

(91) CometTakeOrderedAndProject
Input [5]: [channel#34, id#35, sales#133, returns#134, profit#135]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[channel#34 ASC NULLS FIRST,id#35 ASC NULLS FIRST], output=[channel#34,id#35,sales#133,returns#134,profit#135]), [channel#34, id#35, sales#133, returns#134, profit#135], 100, 0, [channel#34 ASC NULLS FIRST, id#35 ASC NULLS FIRST], [channel#34, id#35, sales#133, returns#134, profit#135]

(92) CometColumnarToRow [codegen id : 19]
Input [5]: [channel#34, id#35, sales#133, returns#134, profit#135]

