== Physical Plan ==
TakeOrderedAndProject (59)
+- * HashAggregate (58)
   +- * CometColumnarToRow (57)
      +- CometColumnarExchange (56)
         +- * HashAggregate (55)
            +- * HashAggregate (54)
               +- * CometColumnarToRow (53)
                  +- CometExchange (52)
                     +- CometHashAggregate (51)
                        +- CometProject (50)
                           +- CometBroadcastHashJoin (49)
                              :- CometProject (44)
                              :  +- CometBroadcastHashJoin (43)
                              :     :- CometProject (38)
                              :     :  +- CometBroadcastHashJoin (37)
                              :     :     :- CometProject (32)
                              :     :     :  +- CometBroadcastHashJoin (31)
                              :     :     :     :- CometHashAggregate (27)
                              :     :     :     :  +- CometExchange (26)
                              :     :     :     :     +- CometHashAggregate (25)
                              :     :     :     :        +- CometProject (24)
                              :     :     :     :           +- CometBroadcastHashJoin (23)
                              :     :     :     :              :- CometProject (19)
                              :     :     :     :              :  +- CometBroadcastHashJoin (18)
                              :     :     :     :              :     :- CometProject (13)
                              :     :     :     :              :     :  +- CometBroadcastHashJoin (12)
                              :     :     :     :              :     :     :- CometUnion (7)
                              :     :     :     :              :     :     :  :- CometProject (3)
                              :     :     :     :              :     :     :  :  +- CometFilter (2)
                              :     :     :     :              :     :     :  :     +- CometScan [native_iceberg_compat] parquet spark_catalog.default.catalog_sales (1)
                              :     :     :     :              :     :     :  +- CometProject (6)
                              :     :     :     :              :     :     :     +- CometFilter (5)
                              :     :     :     :              :     :     :        +- CometScan [native_iceberg_compat] parquet spark_catalog.default.web_sales (4)
                              :     :     :     :              :     :     +- CometBroadcastExchange (11)
                              :     :     :     :              :     :        +- CometProject (10)
                              :     :     :     :              :     :           +- CometFilter (9)
                              :     :     :     :              :     :              +- CometScan [native_iceberg_compat] parquet spark_catalog.default.item (8)
                              :     :     :     :              :     +- CometBroadcastExchange (17)
                              :     :     :     :              :        +- CometProject (16)
                              :     :     :     :              :           +- CometFilter (15)
                              :     :     :     :              :              +- CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim (14)
                              :     :     :     :              +- CometBroadcastExchange (22)
                              :     :     :     :                 +- CometFilter (21)
                              :     :     :     :                    +- CometScan [native_iceberg_compat] parquet spark_catalog.default.customer (20)
                              :     :     :     +- CometBroadcastExchange (30)
                              :     :     :        +- CometFilter (29)
                              :     :     :           +- CometScan [native_iceberg_compat] parquet spark_catalog.default.store_sales (28)
                              :     :     +- CometBroadcastExchange (36)
                              :     :        +- CometProject (35)
                              :     :           +- CometFilter (34)
                              :     :              +- CometScan [native_iceberg_compat] parquet spark_catalog.default.customer_address (33)
                              :     +- CometBroadcastExchange (42)
                              :        +- CometProject (41)
                              :           +- CometFilter (40)
                              :              +- CometScan [native_iceberg_compat] parquet spark_catalog.default.store (39)
                              +- CometBroadcastExchange (48)
                                 +- CometProject (47)
                                    +- CometFilter (46)
                                       +- CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim (45)


(1) CometScan [native_iceberg_compat] parquet spark_catalog.default.catalog_sales
Output [3]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#3)]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int>

(2) CometFilter
Input [3]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_sold_date_sk#3]
Condition : (isnotnull(cs_item_sk#2) AND isnotnull(cs_bill_customer_sk#1))

(3) CometProject
Input [3]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_sold_date_sk#3]
Arguments: [sold_date_sk#4, customer_sk#5, item_sk#6], [cs_sold_date_sk#3 AS sold_date_sk#4, cs_bill_customer_sk#1 AS customer_sk#5, cs_item_sk#2 AS item_sk#6]

(4) CometScan [native_iceberg_compat] parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#7, ws_bill_customer_sk#8, ws_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#9)]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int>

(5) CometFilter
Input [3]: [ws_item_sk#7, ws_bill_customer_sk#8, ws_sold_date_sk#9]
Condition : (isnotnull(ws_item_sk#7) AND isnotnull(ws_bill_customer_sk#8))

(6) CometProject
Input [3]: [ws_item_sk#7, ws_bill_customer_sk#8, ws_sold_date_sk#9]
Arguments: [sold_date_sk#10, customer_sk#11, item_sk#12], [ws_sold_date_sk#9 AS sold_date_sk#10, ws_bill_customer_sk#8 AS customer_sk#11, ws_item_sk#7 AS item_sk#12]

(7) CometUnion
Child 0 Input [3]: [sold_date_sk#4, customer_sk#5, item_sk#6]
Child 1 Input [3]: [sold_date_sk#10, customer_sk#11, item_sk#12]

(8) CometScan [native_iceberg_compat] parquet spark_catalog.default.item
Output [3]: [i_item_sk#13, i_class#14, i_category#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), IsNotNull(i_class), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(9) CometFilter
Input [3]: [i_item_sk#13, i_class#14, i_category#15]
Condition : ((((isnotnull(i_category#15) AND isnotnull(i_class#14)) AND (static_invoke(CharVarcharCodegenUtils.readSidePadding(i_category#15, 50)) = Women                                             )) AND (static_invoke(CharVarcharCodegenUtils.readSidePadding(i_class#14, 50)) = maternity                                         )) AND isnotnull(i_item_sk#13))

(10) CometProject
Input [3]: [i_item_sk#13, i_class#14, i_category#15]
Arguments: [i_item_sk#13], [i_item_sk#13]

(11) CometBroadcastExchange
Input [1]: [i_item_sk#13]
Arguments: [i_item_sk#13]

(12) CometBroadcastHashJoin
Left output [3]: [sold_date_sk#4, customer_sk#5, item_sk#6]
Right output [1]: [i_item_sk#13]
Arguments: [item_sk#6], [i_item_sk#13], Inner, BuildRight

(13) CometProject
Input [4]: [sold_date_sk#4, customer_sk#5, item_sk#6, i_item_sk#13]
Arguments: [sold_date_sk#4, customer_sk#5], [sold_date_sk#4, customer_sk#5]

(14) CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#16, d_year#17, d_moy#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,12), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(15) CometFilter
Input [3]: [d_date_sk#16, d_year#17, d_moy#18]
Condition : ((((isnotnull(d_moy#18) AND isnotnull(d_year#17)) AND (d_moy#18 = 12)) AND (d_year#17 = 1998)) AND isnotnull(d_date_sk#16))

(16) CometProject
Input [3]: [d_date_sk#16, d_year#17, d_moy#18]
Arguments: [d_date_sk#16], [d_date_sk#16]

(17) CometBroadcastExchange
Input [1]: [d_date_sk#16]
Arguments: [d_date_sk#16]

(18) CometBroadcastHashJoin
Left output [2]: [sold_date_sk#4, customer_sk#5]
Right output [1]: [d_date_sk#16]
Arguments: [sold_date_sk#4], [d_date_sk#16], Inner, BuildRight

(19) CometProject
Input [3]: [sold_date_sk#4, customer_sk#5, d_date_sk#16]
Arguments: [customer_sk#5], [customer_sk#5]

(20) CometScan [native_iceberg_compat] parquet spark_catalog.default.customer
Output [2]: [c_customer_sk#19, c_current_addr_sk#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(21) CometFilter
Input [2]: [c_customer_sk#19, c_current_addr_sk#20]
Condition : (isnotnull(c_customer_sk#19) AND isnotnull(c_current_addr_sk#20))

(22) CometBroadcastExchange
Input [2]: [c_customer_sk#19, c_current_addr_sk#20]
Arguments: [c_customer_sk#19, c_current_addr_sk#20]

(23) CometBroadcastHashJoin
Left output [1]: [customer_sk#5]
Right output [2]: [c_customer_sk#19, c_current_addr_sk#20]
Arguments: [customer_sk#5], [c_customer_sk#19], Inner, BuildRight

(24) CometProject
Input [3]: [customer_sk#5, c_customer_sk#19, c_current_addr_sk#20]
Arguments: [c_customer_sk#19, c_current_addr_sk#20], [c_customer_sk#19, c_current_addr_sk#20]

(25) CometHashAggregate
Input [2]: [c_customer_sk#19, c_current_addr_sk#20]
Keys [2]: [c_customer_sk#19, c_current_addr_sk#20]
Functions: []

(26) CometExchange
Input [2]: [c_customer_sk#19, c_current_addr_sk#20]
Arguments: hashpartitioning(c_customer_sk#19, c_current_addr_sk#20, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(27) CometHashAggregate
Input [2]: [c_customer_sk#19, c_current_addr_sk#20]
Keys [2]: [c_customer_sk#19, c_current_addr_sk#20]
Functions: []

(28) CometScan [native_iceberg_compat] parquet spark_catalog.default.store_sales
Output [3]: [ss_customer_sk#21, ss_ext_sales_price#22, ss_sold_date_sk#23]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#23)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_sales_price:decimal(7,2)>

(29) CometFilter
Input [3]: [ss_customer_sk#21, ss_ext_sales_price#22, ss_sold_date_sk#23]
Condition : isnotnull(ss_customer_sk#21)

(30) CometBroadcastExchange
Input [3]: [ss_customer_sk#21, ss_ext_sales_price#22, ss_sold_date_sk#23]
Arguments: [ss_customer_sk#21, ss_ext_sales_price#22, ss_sold_date_sk#23]

(31) CometBroadcastHashJoin
Left output [2]: [c_customer_sk#19, c_current_addr_sk#20]
Right output [3]: [ss_customer_sk#21, ss_ext_sales_price#22, ss_sold_date_sk#23]
Arguments: [c_customer_sk#19], [ss_customer_sk#21], Inner, BuildRight

(32) CometProject
Input [5]: [c_customer_sk#19, c_current_addr_sk#20, ss_customer_sk#21, ss_ext_sales_price#22, ss_sold_date_sk#23]
Arguments: [c_customer_sk#19, c_current_addr_sk#20, ss_ext_sales_price#22, ss_sold_date_sk#23], [c_customer_sk#19, c_current_addr_sk#20, ss_ext_sales_price#22, ss_sold_date_sk#23]

(33) CometScan [native_iceberg_compat] parquet spark_catalog.default.customer_address
Output [3]: [ca_address_sk#24, ca_county#25, ca_state#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county)]
ReadSchema: struct<ca_address_sk:int,ca_county:string,ca_state:string>

(34) CometFilter
Input [3]: [ca_address_sk#24, ca_county#25, ca_state#26]
Condition : ((isnotnull(ca_address_sk#24) AND isnotnull(ca_county#25)) AND isnotnull(static_invoke(CharVarcharCodegenUtils.readSidePadding(ca_state#26, 2))))

(35) CometProject
Input [3]: [ca_address_sk#24, ca_county#25, ca_state#26]
Arguments: [ca_address_sk#24, ca_county#25, ca_state#27], [ca_address_sk#24, ca_county#25, static_invoke(CharVarcharCodegenUtils.readSidePadding(ca_state#26, 2)) AS ca_state#27]

(36) CometBroadcastExchange
Input [3]: [ca_address_sk#24, ca_county#25, ca_state#27]
Arguments: [ca_address_sk#24, ca_county#25, ca_state#27]

(37) CometBroadcastHashJoin
Left output [4]: [c_customer_sk#19, c_current_addr_sk#20, ss_ext_sales_price#22, ss_sold_date_sk#23]
Right output [3]: [ca_address_sk#24, ca_county#25, ca_state#27]
Arguments: [c_current_addr_sk#20], [ca_address_sk#24], Inner, BuildRight

(38) CometProject
Input [7]: [c_customer_sk#19, c_current_addr_sk#20, ss_ext_sales_price#22, ss_sold_date_sk#23, ca_address_sk#24, ca_county#25, ca_state#27]
Arguments: [c_customer_sk#19, ss_ext_sales_price#22, ss_sold_date_sk#23, ca_county#25, ca_state#27], [c_customer_sk#19, ss_ext_sales_price#22, ss_sold_date_sk#23, ca_county#25, ca_state#27]

(39) CometScan [native_iceberg_compat] parquet spark_catalog.default.store
Output [2]: [s_county#28, s_state#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_county)]
ReadSchema: struct<s_county:string,s_state:string>

(40) CometFilter
Input [2]: [s_county#28, s_state#29]
Condition : (isnotnull(s_county#28) AND isnotnull(static_invoke(CharVarcharCodegenUtils.readSidePadding(s_state#29, 2))))

(41) CometProject
Input [2]: [s_county#28, s_state#29]
Arguments: [s_county#28, s_state#30], [s_county#28, static_invoke(CharVarcharCodegenUtils.readSidePadding(s_state#29, 2)) AS s_state#30]

(42) CometBroadcastExchange
Input [2]: [s_county#28, s_state#30]
Arguments: [s_county#28, s_state#30]

(43) CometBroadcastHashJoin
Left output [5]: [c_customer_sk#19, ss_ext_sales_price#22, ss_sold_date_sk#23, ca_county#25, ca_state#27]
Right output [2]: [s_county#28, s_state#30]
Arguments: [ca_county#25, ca_state#27], [s_county#28, s_state#30], Inner, BuildRight

(44) CometProject
Input [7]: [c_customer_sk#19, ss_ext_sales_price#22, ss_sold_date_sk#23, ca_county#25, ca_state#27, s_county#28, s_state#30]
Arguments: [c_customer_sk#19, ss_ext_sales_price#22, ss_sold_date_sk#23], [c_customer_sk#19, ss_ext_sales_price#22, ss_sold_date_sk#23]

(45) CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#31, d_month_seq#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,ScalarSubquery#33), LessThanOrEqual(d_month_seq,ScalarSubquery#34), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(46) CometFilter
Input [2]: [d_date_sk#31, d_month_seq#32]
Condition : (((isnotnull(d_month_seq#32) AND (d_month_seq#32 >= ReusedSubquery Subquery scalar-subquery#33, [id=#35])) AND (d_month_seq#32 <= ReusedSubquery Subquery scalar-subquery#34, [id=#36])) AND isnotnull(d_date_sk#31))

(47) CometProject
Input [2]: [d_date_sk#31, d_month_seq#32]
Arguments: [d_date_sk#31], [d_date_sk#31]

(48) CometBroadcastExchange
Input [1]: [d_date_sk#31]
Arguments: [d_date_sk#31]

(49) CometBroadcastHashJoin
Left output [3]: [c_customer_sk#19, ss_ext_sales_price#22, ss_sold_date_sk#23]
Right output [1]: [d_date_sk#31]
Arguments: [ss_sold_date_sk#23], [d_date_sk#31], Inner, BuildRight

(50) CometProject
Input [4]: [c_customer_sk#19, ss_ext_sales_price#22, ss_sold_date_sk#23, d_date_sk#31]
Arguments: [c_customer_sk#19, ss_ext_sales_price#22], [c_customer_sk#19, ss_ext_sales_price#22]

(51) CometHashAggregate
Input [2]: [c_customer_sk#19, ss_ext_sales_price#22]
Keys [1]: [c_customer_sk#19]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#22))]

(52) CometExchange
Input [2]: [c_customer_sk#19, sum#37]
Arguments: hashpartitioning(c_customer_sk#19, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(53) CometColumnarToRow [codegen id : 1]
Input [2]: [c_customer_sk#19, sum#37]

(54) HashAggregate [codegen id : 1]
Input [2]: [c_customer_sk#19, sum#37]
Keys [1]: [c_customer_sk#19]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#22))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#22))#38]
Results [1]: [cast((MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#22))#38,17,2) / 50) as int) AS segment#39]

(55) HashAggregate [codegen id : 1]
Input [1]: [segment#39]
Keys [1]: [segment#39]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#40]
Results [2]: [segment#39, count#41]

(56) CometColumnarExchange
Input [2]: [segment#39, count#41]
Arguments: hashpartitioning(segment#39, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(57) CometColumnarToRow [codegen id : 2]
Input [2]: [segment#39, count#41]

(58) HashAggregate [codegen id : 2]
Input [2]: [segment#39, count#41]
Keys [1]: [segment#39]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#42]
Results [3]: [segment#39, count(1)#42 AS num_customers#43, (segment#39 * 50) AS segment_base#44]

(59) TakeOrderedAndProject
Input [3]: [segment#39, num_customers#43, segment_base#44]
Arguments: 100, [segment#39 ASC NULLS FIRST, num_customers#43 ASC NULLS FIRST], [segment#39, num_customers#43, segment_base#44]

===== Subqueries =====

Subquery:1 Hosting operator id = 46 Hosting Expression = ReusedSubquery Subquery scalar-subquery#33, [id=#35]

Subquery:2 Hosting operator id = 46 Hosting Expression = ReusedSubquery Subquery scalar-subquery#34, [id=#36]

Subquery:3 Hosting operator id = 45 Hosting Expression = Subquery scalar-subquery#33, [id=#35]
* CometColumnarToRow (66)
+- CometHashAggregate (65)
   +- CometExchange (64)
      +- CometHashAggregate (63)
         +- CometProject (62)
            +- CometFilter (61)
               +- CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim (60)


(60) CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim
Output [3]: [d_month_seq#45, d_year#46, d_moy#47]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,12)]
ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>

(61) CometFilter
Input [3]: [d_month_seq#45, d_year#46, d_moy#47]
Condition : (((isnotnull(d_year#46) AND isnotnull(d_moy#47)) AND (d_year#46 = 1998)) AND (d_moy#47 = 12))

(62) CometProject
Input [3]: [d_month_seq#45, d_year#46, d_moy#47]
Arguments: [(d_month_seq + 1)#48], [(d_month_seq#45 + 1) AS (d_month_seq + 1)#48]

(63) CometHashAggregate
Input [1]: [(d_month_seq + 1)#48]
Keys [1]: [(d_month_seq + 1)#48]
Functions: []

(64) CometExchange
Input [1]: [(d_month_seq + 1)#48]
Arguments: hashpartitioning((d_month_seq + 1)#48, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(65) CometHashAggregate
Input [1]: [(d_month_seq + 1)#48]
Keys [1]: [(d_month_seq + 1)#48]
Functions: []

(66) CometColumnarToRow [codegen id : 1]
Input [1]: [(d_month_seq + 1)#48]

Subquery:4 Hosting operator id = 45 Hosting Expression = Subquery scalar-subquery#34, [id=#36]
* CometColumnarToRow (73)
+- CometHashAggregate (72)
   +- CometExchange (71)
      +- CometHashAggregate (70)
         +- CometProject (69)
            +- CometFilter (68)
               +- CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim (67)


(67) CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim
Output [3]: [d_month_seq#49, d_year#50, d_moy#51]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,12)]
ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>

(68) CometFilter
Input [3]: [d_month_seq#49, d_year#50, d_moy#51]
Condition : (((isnotnull(d_year#50) AND isnotnull(d_moy#51)) AND (d_year#50 = 1998)) AND (d_moy#51 = 12))

(69) CometProject
Input [3]: [d_month_seq#49, d_year#50, d_moy#51]
Arguments: [(d_month_seq + 3)#52], [(d_month_seq#49 + 3) AS (d_month_seq + 3)#52]

(70) CometHashAggregate
Input [1]: [(d_month_seq + 3)#52]
Keys [1]: [(d_month_seq + 3)#52]
Functions: []

(71) CometExchange
Input [1]: [(d_month_seq + 3)#52]
Arguments: hashpartitioning((d_month_seq + 3)#52, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=5]

(72) CometHashAggregate
Input [1]: [(d_month_seq + 3)#52]
Keys [1]: [(d_month_seq + 3)#52]
Functions: []

(73) CometColumnarToRow [codegen id : 1]
Input [1]: [(d_month_seq + 3)#52]


