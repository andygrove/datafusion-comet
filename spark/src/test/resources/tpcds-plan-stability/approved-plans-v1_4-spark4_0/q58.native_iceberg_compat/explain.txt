== Physical Plan ==
TakeOrderedAndProject (57)
+- * Project (56)
   +- * BroadcastHashJoin Inner BuildRight (55)
      :- * Project (40)
      :  +- * BroadcastHashJoin Inner BuildRight (39)
      :     :- * Filter (24)
      :     :  +- * HashAggregate (23)
      :     :     +- * CometColumnarToRow (22)
      :     :        +- CometExchange (21)
      :     :           +- CometHashAggregate (20)
      :     :              +- CometProject (19)
      :     :                 +- CometBroadcastHashJoin (18)
      :     :                    :- CometProject (8)
      :     :                    :  +- CometBroadcastHashJoin (7)
      :     :                    :     :- CometFilter (2)
      :     :                    :     :  +- CometScan [native_iceberg_compat] parquet spark_catalog.default.store_sales (1)
      :     :                    :     +- CometBroadcastExchange (6)
      :     :                    :        +- CometProject (5)
      :     :                    :           +- CometFilter (4)
      :     :                    :              +- CometScan [native_iceberg_compat] parquet spark_catalog.default.item (3)
      :     :                    +- CometBroadcastExchange (17)
      :     :                       +- CometProject (16)
      :     :                          +- CometBroadcastHashJoin (15)
      :     :                             :- CometFilter (10)
      :     :                             :  +- CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim (9)
      :     :                             +- CometBroadcastExchange (14)
      :     :                                +- CometProject (13)
      :     :                                   +- CometFilter (12)
      :     :                                      +- CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim (11)
      :     +- BroadcastExchange (38)
      :        +- * Filter (37)
      :           +- * HashAggregate (36)
      :              +- * CometColumnarToRow (35)
      :                 +- CometExchange (34)
      :                    +- CometHashAggregate (33)
      :                       +- CometProject (32)
      :                          +- CometBroadcastHashJoin (31)
      :                             :- CometProject (29)
      :                             :  +- CometBroadcastHashJoin (28)
      :                             :     :- CometFilter (26)
      :                             :     :  +- CometScan [native_iceberg_compat] parquet spark_catalog.default.catalog_sales (25)
      :                             :     +- ReusedExchange (27)
      :                             +- ReusedExchange (30)
      +- BroadcastExchange (54)
         +- * Filter (53)
            +- * HashAggregate (52)
               +- * CometColumnarToRow (51)
                  +- CometExchange (50)
                     +- CometHashAggregate (49)
                        +- CometProject (48)
                           +- CometBroadcastHashJoin (47)
                              :- CometProject (45)
                              :  +- CometBroadcastHashJoin (44)
                              :     :- CometFilter (42)
                              :     :  +- CometScan [native_iceberg_compat] parquet spark_catalog.default.web_sales (41)
                              :     +- ReusedExchange (43)
                              +- ReusedExchange (46)


(1) CometScan [native_iceberg_compat] parquet spark_catalog.default.store_sales
Output [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) CometFilter
Input [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_item_sk#1)

(3) CometScan [native_iceberg_compat] parquet spark_catalog.default.item
Output [2]: [i_item_sk#4, i_item_id#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(4) CometFilter
Input [2]: [i_item_sk#4, i_item_id#5]
Condition : (isnotnull(i_item_sk#4) AND isnotnull(static_invoke(CharVarcharCodegenUtils.readSidePadding(i_item_id#5, 16))))

(5) CometProject
Input [2]: [i_item_sk#4, i_item_id#5]
Arguments: [i_item_sk#4, i_item_id#6], [i_item_sk#4, static_invoke(CharVarcharCodegenUtils.readSidePadding(i_item_id#5, 16)) AS i_item_id#6]

(6) CometBroadcastExchange
Input [2]: [i_item_sk#4, i_item_id#6]
Arguments: [i_item_sk#4, i_item_id#6]

(7) CometBroadcastHashJoin
Left output [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Right output [2]: [i_item_sk#4, i_item_id#6]
Arguments: [ss_item_sk#1], [i_item_sk#4], Inner, BuildRight

(8) CometProject
Input [5]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_sk#4, i_item_id#6]
Arguments: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#6], [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#6]

(9) CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#7, d_date#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(10) CometFilter
Input [2]: [d_date_sk#7, d_date#8]
Condition : isnotnull(d_date_sk#7)

(11) CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim
Output [2]: [d_date#9, d_week_seq#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), EqualTo(d_week_seq,ScalarSubquery#11)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(12) CometFilter
Input [2]: [d_date#9, d_week_seq#10]
Condition : (isnotnull(d_week_seq#10) AND (d_week_seq#10 = ReusedSubquery Subquery scalar-subquery#11, [id=#12]))

(13) CometProject
Input [2]: [d_date#9, d_week_seq#10]
Arguments: [d_date#9], [d_date#9]

(14) CometBroadcastExchange
Input [1]: [d_date#9]
Arguments: [d_date#9]

(15) CometBroadcastHashJoin
Left output [2]: [d_date_sk#7, d_date#8]
Right output [1]: [d_date#9]
Arguments: [d_date#8], [d_date#9], LeftSemi, BuildRight

(16) CometProject
Input [2]: [d_date_sk#7, d_date#8]
Arguments: [d_date_sk#7], [d_date_sk#7]

(17) CometBroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: [d_date_sk#7]

(18) CometBroadcastHashJoin
Left output [3]: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#6]
Right output [1]: [d_date_sk#7]
Arguments: [ss_sold_date_sk#3], [d_date_sk#7], Inner, BuildRight

(19) CometProject
Input [4]: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#6, d_date_sk#7]
Arguments: [ss_ext_sales_price#2, i_item_id#6], [ss_ext_sales_price#2, i_item_id#6]

(20) CometHashAggregate
Input [2]: [ss_ext_sales_price#2, i_item_id#6]
Keys [1]: [i_item_id#6]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#2))]

(21) CometExchange
Input [2]: [i_item_id#6, sum#13]
Arguments: hashpartitioning(i_item_id#6, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(22) CometColumnarToRow [codegen id : 3]
Input [2]: [i_item_id#6, sum#13]

(23) HashAggregate [codegen id : 3]
Input [2]: [i_item_id#6, sum#13]
Keys [1]: [i_item_id#6]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#2))#14]
Results [2]: [i_item_id#6 AS item_id#15, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#14,17,2) AS ss_item_rev#16]

(24) Filter [codegen id : 3]
Input [2]: [item_id#15, ss_item_rev#16]
Condition : isnotnull(ss_item_rev#16)

(25) CometScan [native_iceberg_compat] parquet spark_catalog.default.catalog_sales
Output [3]: [cs_item_sk#17, cs_ext_sales_price#18, cs_sold_date_sk#19]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#19)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>

(26) CometFilter
Input [3]: [cs_item_sk#17, cs_ext_sales_price#18, cs_sold_date_sk#19]
Condition : isnotnull(cs_item_sk#17)

(27) ReusedExchange [Reuses operator id: 6]
Output [2]: [i_item_sk#20, i_item_id#21]

(28) CometBroadcastHashJoin
Left output [3]: [cs_item_sk#17, cs_ext_sales_price#18, cs_sold_date_sk#19]
Right output [2]: [i_item_sk#20, i_item_id#21]
Arguments: [cs_item_sk#17], [i_item_sk#20], Inner, BuildRight

(29) CometProject
Input [5]: [cs_item_sk#17, cs_ext_sales_price#18, cs_sold_date_sk#19, i_item_sk#20, i_item_id#21]
Arguments: [cs_ext_sales_price#18, cs_sold_date_sk#19, i_item_id#21], [cs_ext_sales_price#18, cs_sold_date_sk#19, i_item_id#21]

(30) ReusedExchange [Reuses operator id: 17]
Output [1]: [d_date_sk#22]

(31) CometBroadcastHashJoin
Left output [3]: [cs_ext_sales_price#18, cs_sold_date_sk#19, i_item_id#21]
Right output [1]: [d_date_sk#22]
Arguments: [cs_sold_date_sk#19], [d_date_sk#22], Inner, BuildRight

(32) CometProject
Input [4]: [cs_ext_sales_price#18, cs_sold_date_sk#19, i_item_id#21, d_date_sk#22]
Arguments: [cs_ext_sales_price#18, i_item_id#21], [cs_ext_sales_price#18, i_item_id#21]

(33) CometHashAggregate
Input [2]: [cs_ext_sales_price#18, i_item_id#21]
Keys [1]: [i_item_id#21]
Functions [1]: [partial_sum(UnscaledValue(cs_ext_sales_price#18))]

(34) CometExchange
Input [2]: [i_item_id#21, sum#23]
Arguments: hashpartitioning(i_item_id#21, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(35) CometColumnarToRow [codegen id : 1]
Input [2]: [i_item_id#21, sum#23]

(36) HashAggregate [codegen id : 1]
Input [2]: [i_item_id#21, sum#23]
Keys [1]: [i_item_id#21]
Functions [1]: [sum(UnscaledValue(cs_ext_sales_price#18))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_ext_sales_price#18))#24]
Results [2]: [i_item_id#21 AS item_id#25, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#18))#24,17,2) AS cs_item_rev#26]

(37) Filter [codegen id : 1]
Input [2]: [item_id#25, cs_item_rev#26]
Condition : isnotnull(cs_item_rev#26)

(38) BroadcastExchange
Input [2]: [item_id#25, cs_item_rev#26]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=3]

(39) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [item_id#15]
Right keys [1]: [item_id#25]
Join type: Inner
Join condition: ((((cast(ss_item_rev#16 as decimal(19,3)) >= (0.9 * cs_item_rev#26)) AND (cast(ss_item_rev#16 as decimal(20,3)) <= (1.1 * cs_item_rev#26))) AND (cast(cs_item_rev#26 as decimal(19,3)) >= (0.9 * ss_item_rev#16))) AND (cast(cs_item_rev#26 as decimal(20,3)) <= (1.1 * ss_item_rev#16)))

(40) Project [codegen id : 3]
Output [3]: [item_id#15, ss_item_rev#16, cs_item_rev#26]
Input [4]: [item_id#15, ss_item_rev#16, item_id#25, cs_item_rev#26]

(41) CometScan [native_iceberg_compat] parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#27, ws_ext_sales_price#28, ws_sold_date_sk#29]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#29)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_ext_sales_price:decimal(7,2)>

(42) CometFilter
Input [3]: [ws_item_sk#27, ws_ext_sales_price#28, ws_sold_date_sk#29]
Condition : isnotnull(ws_item_sk#27)

(43) ReusedExchange [Reuses operator id: 6]
Output [2]: [i_item_sk#30, i_item_id#31]

(44) CometBroadcastHashJoin
Left output [3]: [ws_item_sk#27, ws_ext_sales_price#28, ws_sold_date_sk#29]
Right output [2]: [i_item_sk#30, i_item_id#31]
Arguments: [ws_item_sk#27], [i_item_sk#30], Inner, BuildRight

(45) CometProject
Input [5]: [ws_item_sk#27, ws_ext_sales_price#28, ws_sold_date_sk#29, i_item_sk#30, i_item_id#31]
Arguments: [ws_ext_sales_price#28, ws_sold_date_sk#29, i_item_id#31], [ws_ext_sales_price#28, ws_sold_date_sk#29, i_item_id#31]

(46) ReusedExchange [Reuses operator id: 17]
Output [1]: [d_date_sk#32]

(47) CometBroadcastHashJoin
Left output [3]: [ws_ext_sales_price#28, ws_sold_date_sk#29, i_item_id#31]
Right output [1]: [d_date_sk#32]
Arguments: [ws_sold_date_sk#29], [d_date_sk#32], Inner, BuildRight

(48) CometProject
Input [4]: [ws_ext_sales_price#28, ws_sold_date_sk#29, i_item_id#31, d_date_sk#32]
Arguments: [ws_ext_sales_price#28, i_item_id#31], [ws_ext_sales_price#28, i_item_id#31]

(49) CometHashAggregate
Input [2]: [ws_ext_sales_price#28, i_item_id#31]
Keys [1]: [i_item_id#31]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#28))]

(50) CometExchange
Input [2]: [i_item_id#31, sum#33]
Arguments: hashpartitioning(i_item_id#31, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(51) CometColumnarToRow [codegen id : 2]
Input [2]: [i_item_id#31, sum#33]

(52) HashAggregate [codegen id : 2]
Input [2]: [i_item_id#31, sum#33]
Keys [1]: [i_item_id#31]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#28))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#28))#34]
Results [2]: [i_item_id#31 AS item_id#35, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#28))#34,17,2) AS ws_item_rev#36]

(53) Filter [codegen id : 2]
Input [2]: [item_id#35, ws_item_rev#36]
Condition : isnotnull(ws_item_rev#36)

(54) BroadcastExchange
Input [2]: [item_id#35, ws_item_rev#36]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=5]

(55) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [item_id#15]
Right keys [1]: [item_id#35]
Join type: Inner
Join condition: ((((((((cast(ss_item_rev#16 as decimal(19,3)) >= (0.9 * ws_item_rev#36)) AND (cast(ss_item_rev#16 as decimal(20,3)) <= (1.1 * ws_item_rev#36))) AND (cast(cs_item_rev#26 as decimal(19,3)) >= (0.9 * ws_item_rev#36))) AND (cast(cs_item_rev#26 as decimal(20,3)) <= (1.1 * ws_item_rev#36))) AND (cast(ws_item_rev#36 as decimal(19,3)) >= (0.9 * ss_item_rev#16))) AND (cast(ws_item_rev#36 as decimal(20,3)) <= (1.1 * ss_item_rev#16))) AND (cast(ws_item_rev#36 as decimal(19,3)) >= (0.9 * cs_item_rev#26))) AND (cast(ws_item_rev#36 as decimal(20,3)) <= (1.1 * cs_item_rev#26)))

(56) Project [codegen id : 3]
Output [8]: [item_id#15, ss_item_rev#16, (((ss_item_rev#16 / ((ss_item_rev#16 + cs_item_rev#26) + ws_item_rev#36)) / 3) * 100) AS ss_dev#37, cs_item_rev#26, (((cs_item_rev#26 / ((ss_item_rev#16 + cs_item_rev#26) + ws_item_rev#36)) / 3) * 100) AS cs_dev#38, ws_item_rev#36, (((ws_item_rev#36 / ((ss_item_rev#16 + cs_item_rev#26) + ws_item_rev#36)) / 3) * 100) AS ws_dev#39, (((ss_item_rev#16 + cs_item_rev#26) + ws_item_rev#36) / 3) AS average#40]
Input [5]: [item_id#15, ss_item_rev#16, cs_item_rev#26, item_id#35, ws_item_rev#36]

(57) TakeOrderedAndProject
Input [8]: [item_id#15, ss_item_rev#16, ss_dev#37, cs_item_rev#26, cs_dev#38, ws_item_rev#36, ws_dev#39, average#40]
Arguments: 100, [item_id#15 ASC NULLS FIRST, ss_item_rev#16 ASC NULLS FIRST], [item_id#15, ss_item_rev#16, ss_dev#37, cs_item_rev#26, cs_dev#38, ws_item_rev#36, ws_dev#39, average#40]

===== Subqueries =====

Subquery:1 Hosting operator id = 12 Hosting Expression = ReusedSubquery Subquery scalar-subquery#11, [id=#12]

Subquery:2 Hosting operator id = 11 Hosting Expression = Subquery scalar-subquery#11, [id=#12]
* CometColumnarToRow (61)
+- CometProject (60)
   +- CometFilter (59)
      +- CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim (58)


(58) CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim
Output [2]: [d_date#41, d_week_seq#42]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), EqualTo(d_date,2000-01-03)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(59) CometFilter
Input [2]: [d_date#41, d_week_seq#42]
Condition : (isnotnull(d_date#41) AND (d_date#41 = 2000-01-03))

(60) CometProject
Input [2]: [d_date#41, d_week_seq#42]
Arguments: [d_week_seq#42], [d_week_seq#42]

(61) CometColumnarToRow [codegen id : 1]
Input [1]: [d_week_seq#42]


