== Physical Plan ==
* Project (4)
+- * CometColumnarToRow (3)
   +- CometFilter (2)
      +- CometScan [native_iceberg_compat] parquet spark_catalog.default.reason (1)


(1) CometScan [native_iceberg_compat] parquet spark_catalog.default.reason
Output [1]: [r_reason_sk#1]
Batched: true
Location [not included in comparison]/{warehouse_dir}/reason]
PushedFilters: [IsNotNull(r_reason_sk), EqualTo(r_reason_sk,1)]
ReadSchema: struct<r_reason_sk:int>

(2) CometFilter
Input [1]: [r_reason_sk#1]
Condition : (isnotnull(r_reason_sk#1) AND (r_reason_sk#1 = 1))

(3) CometColumnarToRow [codegen id : 1]
Input [1]: [r_reason_sk#1]

(4) Project [codegen id : 1]
Output [5]: [CASE WHEN (Subquery scalar-subquery#2, [id=#3].count(1) > 62316685) THEN ReusedSubquery Subquery scalar-subquery#2, [id=#3].avg(ss_ext_discount_amt) ELSE ReusedSubquery Subquery scalar-subquery#2, [id=#3].avg(ss_net_paid) END AS bucket1#4, CASE WHEN (Subquery scalar-subquery#5, [id=#6].count(1) > 19045798) THEN ReusedSubquery Subquery scalar-subquery#5, [id=#6].avg(ss_ext_discount_amt) ELSE ReusedSubquery Subquery scalar-subquery#5, [id=#6].avg(ss_net_paid) END AS bucket2#7, CASE WHEN (Subquery scalar-subquery#8, [id=#9].count(1) > 365541424) THEN ReusedSubquery Subquery scalar-subquery#8, [id=#9].avg(ss_ext_discount_amt) ELSE ReusedSubquery Subquery scalar-subquery#8, [id=#9].avg(ss_net_paid) END AS bucket3#10, CASE WHEN (Subquery scalar-subquery#11, [id=#12].count(1) > 216357808) THEN ReusedSubquery Subquery scalar-subquery#11, [id=#12].avg(ss_ext_discount_amt) ELSE ReusedSubquery Subquery scalar-subquery#11, [id=#12].avg(ss_net_paid) END AS bucket4#13, CASE WHEN (Subquery scalar-subquery#14, [id=#15].count(1) > 184483884) THEN ReusedSubquery Subquery scalar-subquery#14, [id=#15].avg(ss_ext_discount_amt) ELSE ReusedSubquery Subquery scalar-subquery#14, [id=#15].avg(ss_net_paid) END AS bucket5#16]
Input [1]: [r_reason_sk#1]

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = Subquery scalar-subquery#2, [id=#3]
* CometColumnarToRow (12)
+- CometProject (11)
   +- CometHashAggregate (10)
      +- CometExchange (9)
         +- CometHashAggregate (8)
            +- CometProject (7)
               +- CometFilter (6)
                  +- CometScan [native_iceberg_compat] parquet spark_catalog.default.store_sales (5)


(5) CometScan [native_iceberg_compat] parquet spark_catalog.default.store_sales
Output [4]: [ss_quantity#17, ss_ext_discount_amt#18, ss_net_paid#19, ss_sold_date_sk#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,1), LessThanOrEqual(ss_quantity,20)]
ReadSchema: struct<ss_quantity:int,ss_ext_discount_amt:decimal(7,2),ss_net_paid:decimal(7,2)>

(6) CometFilter
Input [4]: [ss_quantity#17, ss_ext_discount_amt#18, ss_net_paid#19, ss_sold_date_sk#20]
Condition : ((isnotnull(ss_quantity#17) AND (ss_quantity#17 >= 1)) AND (ss_quantity#17 <= 20))

(7) CometProject
Input [4]: [ss_quantity#17, ss_ext_discount_amt#18, ss_net_paid#19, ss_sold_date_sk#20]
Arguments: [ss_ext_discount_amt#18, ss_net_paid#19], [ss_ext_discount_amt#18, ss_net_paid#19]

(8) CometHashAggregate
Input [2]: [ss_ext_discount_amt#18, ss_net_paid#19]
Keys: []
Functions [3]: [partial_count(1), partial_avg(UnscaledValue(ss_ext_discount_amt#18)), partial_avg(UnscaledValue(ss_net_paid#19))]

(9) CometExchange
Input [5]: [count#21, sum#22, count#23, sum#24, count#25]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(10) CometHashAggregate
Input [5]: [count#21, sum#22, count#23, sum#24, count#25]
Keys: []
Functions [3]: [count(1), avg(UnscaledValue(ss_ext_discount_amt#18)), avg(UnscaledValue(ss_net_paid#19))]

(11) CometProject
Input [3]: [count(1)#26, avg(ss_ext_discount_amt)#27, avg(ss_net_paid)#28]
Arguments: [mergedValue#29], [named_struct(count(1), count(1)#26, avg(ss_ext_discount_amt), avg(ss_ext_discount_amt)#27, avg(ss_net_paid), avg(ss_net_paid)#28) AS mergedValue#29]

(12) CometColumnarToRow [codegen id : 1]
Input [1]: [mergedValue#29]

Subquery:2 Hosting operator id = 4 Hosting Expression = ReusedSubquery Subquery scalar-subquery#2, [id=#3]

Subquery:3 Hosting operator id = 4 Hosting Expression = ReusedSubquery Subquery scalar-subquery#2, [id=#3]

Subquery:4 Hosting operator id = 4 Hosting Expression = Subquery scalar-subquery#5, [id=#6]
* CometColumnarToRow (20)
+- CometProject (19)
   +- CometHashAggregate (18)
      +- CometExchange (17)
         +- CometHashAggregate (16)
            +- CometProject (15)
               +- CometFilter (14)
                  +- CometScan [native_iceberg_compat] parquet spark_catalog.default.store_sales (13)


(13) CometScan [native_iceberg_compat] parquet spark_catalog.default.store_sales
Output [4]: [ss_quantity#30, ss_ext_discount_amt#31, ss_net_paid#32, ss_sold_date_sk#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,21), LessThanOrEqual(ss_quantity,40)]
ReadSchema: struct<ss_quantity:int,ss_ext_discount_amt:decimal(7,2),ss_net_paid:decimal(7,2)>

(14) CometFilter
Input [4]: [ss_quantity#30, ss_ext_discount_amt#31, ss_net_paid#32, ss_sold_date_sk#33]
Condition : ((isnotnull(ss_quantity#30) AND (ss_quantity#30 >= 21)) AND (ss_quantity#30 <= 40))

(15) CometProject
Input [4]: [ss_quantity#30, ss_ext_discount_amt#31, ss_net_paid#32, ss_sold_date_sk#33]
Arguments: [ss_ext_discount_amt#31, ss_net_paid#32], [ss_ext_discount_amt#31, ss_net_paid#32]

(16) CometHashAggregate
Input [2]: [ss_ext_discount_amt#31, ss_net_paid#32]
Keys: []
Functions [3]: [partial_count(1), partial_avg(UnscaledValue(ss_ext_discount_amt#31)), partial_avg(UnscaledValue(ss_net_paid#32))]

(17) CometExchange
Input [5]: [count#34, sum#35, count#36, sum#15, count#37]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(18) CometHashAggregate
Input [5]: [count#34, sum#35, count#36, sum#15, count#37]
Keys: []
Functions [3]: [count(1), avg(UnscaledValue(ss_ext_discount_amt#31)), avg(UnscaledValue(ss_net_paid#32))]

(19) CometProject
Input [3]: [count(1)#38, avg(ss_ext_discount_amt)#39, avg(ss_net_paid)#40]
Arguments: [mergedValue#41], [named_struct(count(1), count(1)#38, avg(ss_ext_discount_amt), avg(ss_ext_discount_amt)#39, avg(ss_net_paid), avg(ss_net_paid)#40) AS mergedValue#41]

(20) CometColumnarToRow [codegen id : 1]
Input [1]: [mergedValue#41]

Subquery:5 Hosting operator id = 4 Hosting Expression = ReusedSubquery Subquery scalar-subquery#5, [id=#6]

Subquery:6 Hosting operator id = 4 Hosting Expression = ReusedSubquery Subquery scalar-subquery#5, [id=#6]

Subquery:7 Hosting operator id = 4 Hosting Expression = Subquery scalar-subquery#8, [id=#9]
* CometColumnarToRow (28)
+- CometProject (27)
   +- CometHashAggregate (26)
      +- CometExchange (25)
         +- CometHashAggregate (24)
            +- CometProject (23)
               +- CometFilter (22)
                  +- CometScan [native_iceberg_compat] parquet spark_catalog.default.store_sales (21)


(21) CometScan [native_iceberg_compat] parquet spark_catalog.default.store_sales
Output [4]: [ss_quantity#42, ss_ext_discount_amt#43, ss_net_paid#44, ss_sold_date_sk#45]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,41), LessThanOrEqual(ss_quantity,60)]
ReadSchema: struct<ss_quantity:int,ss_ext_discount_amt:decimal(7,2),ss_net_paid:decimal(7,2)>

(22) CometFilter
Input [4]: [ss_quantity#42, ss_ext_discount_amt#43, ss_net_paid#44, ss_sold_date_sk#45]
Condition : ((isnotnull(ss_quantity#42) AND (ss_quantity#42 >= 41)) AND (ss_quantity#42 <= 60))

(23) CometProject
Input [4]: [ss_quantity#42, ss_ext_discount_amt#43, ss_net_paid#44, ss_sold_date_sk#45]
Arguments: [ss_ext_discount_amt#43, ss_net_paid#44], [ss_ext_discount_amt#43, ss_net_paid#44]

(24) CometHashAggregate
Input [2]: [ss_ext_discount_amt#43, ss_net_paid#44]
Keys: []
Functions [3]: [partial_count(1), partial_avg(UnscaledValue(ss_ext_discount_amt#43)), partial_avg(UnscaledValue(ss_net_paid#44))]

(25) CometExchange
Input [5]: [count#46, sum#47, count#48, sum#49, count#50]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(26) CometHashAggregate
Input [5]: [count#46, sum#47, count#48, sum#49, count#50]
Keys: []
Functions [3]: [count(1), avg(UnscaledValue(ss_ext_discount_amt#43)), avg(UnscaledValue(ss_net_paid#44))]

(27) CometProject
Input [3]: [count(1)#51, avg(ss_ext_discount_amt)#52, avg(ss_net_paid)#53]
Arguments: [mergedValue#54], [named_struct(count(1), count(1)#51, avg(ss_ext_discount_amt), avg(ss_ext_discount_amt)#52, avg(ss_net_paid), avg(ss_net_paid)#53) AS mergedValue#54]

(28) CometColumnarToRow [codegen id : 1]
Input [1]: [mergedValue#54]

Subquery:8 Hosting operator id = 4 Hosting Expression = ReusedSubquery Subquery scalar-subquery#8, [id=#9]

Subquery:9 Hosting operator id = 4 Hosting Expression = ReusedSubquery Subquery scalar-subquery#8, [id=#9]

Subquery:10 Hosting operator id = 4 Hosting Expression = Subquery scalar-subquery#11, [id=#12]
* CometColumnarToRow (36)
+- CometProject (35)
   +- CometHashAggregate (34)
      +- CometExchange (33)
         +- CometHashAggregate (32)
            +- CometProject (31)
               +- CometFilter (30)
                  +- CometScan [native_iceberg_compat] parquet spark_catalog.default.store_sales (29)


(29) CometScan [native_iceberg_compat] parquet spark_catalog.default.store_sales
Output [4]: [ss_quantity#55, ss_ext_discount_amt#56, ss_net_paid#57, ss_sold_date_sk#58]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,61), LessThanOrEqual(ss_quantity,80)]
ReadSchema: struct<ss_quantity:int,ss_ext_discount_amt:decimal(7,2),ss_net_paid:decimal(7,2)>

(30) CometFilter
Input [4]: [ss_quantity#55, ss_ext_discount_amt#56, ss_net_paid#57, ss_sold_date_sk#58]
Condition : ((isnotnull(ss_quantity#55) AND (ss_quantity#55 >= 61)) AND (ss_quantity#55 <= 80))

(31) CometProject
Input [4]: [ss_quantity#55, ss_ext_discount_amt#56, ss_net_paid#57, ss_sold_date_sk#58]
Arguments: [ss_ext_discount_amt#56, ss_net_paid#57], [ss_ext_discount_amt#56, ss_net_paid#57]

(32) CometHashAggregate
Input [2]: [ss_ext_discount_amt#56, ss_net_paid#57]
Keys: []
Functions [3]: [partial_count(1), partial_avg(UnscaledValue(ss_ext_discount_amt#56)), partial_avg(UnscaledValue(ss_net_paid#57))]

(33) CometExchange
Input [5]: [count#59, sum#60, count#61, sum#62, count#63]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(34) CometHashAggregate
Input [5]: [count#59, sum#60, count#61, sum#62, count#63]
Keys: []
Functions [3]: [count(1), avg(UnscaledValue(ss_ext_discount_amt#56)), avg(UnscaledValue(ss_net_paid#57))]

(35) CometProject
Input [3]: [count(1)#64, avg(ss_ext_discount_amt)#65, avg(ss_net_paid)#66]
Arguments: [mergedValue#67], [named_struct(count(1), count(1)#64, avg(ss_ext_discount_amt), avg(ss_ext_discount_amt)#65, avg(ss_net_paid), avg(ss_net_paid)#66) AS mergedValue#67]

(36) CometColumnarToRow [codegen id : 1]
Input [1]: [mergedValue#67]

Subquery:11 Hosting operator id = 4 Hosting Expression = ReusedSubquery Subquery scalar-subquery#11, [id=#12]

Subquery:12 Hosting operator id = 4 Hosting Expression = ReusedSubquery Subquery scalar-subquery#11, [id=#12]

Subquery:13 Hosting operator id = 4 Hosting Expression = Subquery scalar-subquery#14, [id=#15]
* CometColumnarToRow (44)
+- CometProject (43)
   +- CometHashAggregate (42)
      +- CometExchange (41)
         +- CometHashAggregate (40)
            +- CometProject (39)
               +- CometFilter (38)
                  +- CometScan [native_iceberg_compat] parquet spark_catalog.default.store_sales (37)


(37) CometScan [native_iceberg_compat] parquet spark_catalog.default.store_sales
Output [4]: [ss_quantity#68, ss_ext_discount_amt#69, ss_net_paid#70, ss_sold_date_sk#71]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,81), LessThanOrEqual(ss_quantity,100)]
ReadSchema: struct<ss_quantity:int,ss_ext_discount_amt:decimal(7,2),ss_net_paid:decimal(7,2)>

(38) CometFilter
Input [4]: [ss_quantity#68, ss_ext_discount_amt#69, ss_net_paid#70, ss_sold_date_sk#71]
Condition : ((isnotnull(ss_quantity#68) AND (ss_quantity#68 >= 81)) AND (ss_quantity#68 <= 100))

(39) CometProject
Input [4]: [ss_quantity#68, ss_ext_discount_amt#69, ss_net_paid#70, ss_sold_date_sk#71]
Arguments: [ss_ext_discount_amt#69, ss_net_paid#70], [ss_ext_discount_amt#69, ss_net_paid#70]

(40) CometHashAggregate
Input [2]: [ss_ext_discount_amt#69, ss_net_paid#70]
Keys: []
Functions [3]: [partial_count(1), partial_avg(UnscaledValue(ss_ext_discount_amt#69)), partial_avg(UnscaledValue(ss_net_paid#70))]

(41) CometExchange
Input [5]: [count#72, sum#73, count#74, sum#75, count#76]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=5]

(42) CometHashAggregate
Input [5]: [count#72, sum#73, count#74, sum#75, count#76]
Keys: []
Functions [3]: [count(1), avg(UnscaledValue(ss_ext_discount_amt#69)), avg(UnscaledValue(ss_net_paid#70))]

(43) CometProject
Input [3]: [count(1)#77, avg(ss_ext_discount_amt)#78, avg(ss_net_paid)#79]
Arguments: [mergedValue#80], [named_struct(count(1), count(1)#77, avg(ss_ext_discount_amt), avg(ss_ext_discount_amt)#78, avg(ss_net_paid), avg(ss_net_paid)#79) AS mergedValue#80]

(44) CometColumnarToRow [codegen id : 1]
Input [1]: [mergedValue#80]

Subquery:14 Hosting operator id = 4 Hosting Expression = ReusedSubquery Subquery scalar-subquery#14, [id=#15]

Subquery:15 Hosting operator id = 4 Hosting Expression = ReusedSubquery Subquery scalar-subquery#14, [id=#15]


